MLOps를 위한 핵심적인 쿠버네티스 특징
- Reproducibility -> 실행 환경의 일관성 & 독립성 (pod)
- Job scheduling -> 스케줄 관리, 병렬 작업 관리, 유휴 자원 관리 (deployment)
- Auto-healing & auto-scaling -> 장애 대응, 트래픽 대응 (deployment, service)
=> 학습 서버의 장애 자동 대응, gpu 추가 시 대응, ...
=> 다수의 사람이 같이 쓸 때 queue에 task만 던져놓으면 알아서 처리

kubernetes에 익숙치 않은 사람도 ML model 개발 전과정을 해볼 수 있게 구글이 프로그램 제공
- kubeflow

kubeflow 메인 구성요소
- pipelines => katib (하이퍼 파라미터 튜닝)

kubeflow pipelines
- 머신러닝 workflow 를 DAG 형태로 정의한 것
- pipeline을 구성하는 각각의 component 들이 k8s 위에서 pod로 생성되어 서로 데이터를 주고받으며 흘러감
- 목적
    - end to end orchestration
        - 모델 연구 및 학습 과정과 서빙 과정의 괴리가 없도록
    - easy experimentation
        - 다양한 configuration 에 따라 수많은 시도를 쉽게
    - easy re-use
        - 잘 설계된 kfp component 들은 재사용 가능하므로 새로 pipeline 만들 때 작업 효율 향상

kubeflow 설치
- pre-requisite
    - kustomize
        - 여러 개의 yaml 파일들을 쉽게 관리하기 위한 도구 (Helm 과 비슷한 역할)
    - 여러 resource 들의 configuration을 템플릿(base)과 커스터마이징한 부분(overlay)로 나누어서 관리할 수 있는 도구
    - kustomize build 를 통해 base + overlay 가 merge 된 형태의 yaml 파일들을 생성 가능
- kubeflow manifests 이용
- step 1: kustomize 설정
    - https://github.com/kubernetes-sigs/kustomize/releases/tag/v3.2.0
    - chmod +x kustomize_3.2.0_darwin_amd64
    - mv kustomize_3.2.0_darwin_amd64 /usr/local/bin/kustomize
    - kustomize version (실행될 것)
- step 2: minikube start
    - minikube start --driver=docker \
    --cpus='2' --memory='2g' \
    --kubernetes-version=v1.19.3 \
    --extra-config=apiserver.service-account-signing-key-file=/var/lib/minikube/certs/sa.key \
    --extra-config=apiserver.service-account-issuer=kubernetes.default.svc
- step 3: git clone kubeflow/manifests
    - git clone https://github.com/kubeflow/manifests.git
    - cd manifests
    - git checkout tags/v1.4.0
- step 4: 각각의 kubeflow 구성 요소 순서대로 설치
    - kubeflow/manifests tags/v1.4.0 installation 가이드 확인
    - 설치 상태 확인을 위해 istio 같은 경우 kubens istio-system 이후 kubectl get po
    - knative, kfserving Training/MPI operator 생략
    - pipelines 설치 시 STDIN error 뜰 경우 명령어 재실행
    - 현재 error가 뜨는데 아마도 minikube start 시의 memory 문제일 것 같음
    - Part4 chap1-2 23분부터 다시 볼 것

kubeflow 접속
- 포트 포워딩
    - kubectl port-forward svc/istio-ingressgateway -n istio-system 8080:80
    - localhost:8080 으로 kubeflow 대시보드 접속 가능
    - default 접속 정보 = ID: user@example.com, PW: 12341234

Other useful tool
- kubectx
    - kubectx: kubernetes current-context 변경 툴
    - kubens: kubernetes current-namespace 변경 툴
    - https://github.com/ahmetb/kubectx 에서 설치
        - kubens kubeflow => 바라보고 있는 namespace를 kubeflow로 변경
- kubectl-alias
    - https://github.com/ahmetb/kubectl-aliases 에서 설치
    - e.g.,) kubectl get pod -> kgpo
    - e.g.,) kubectl get deployment -w -> kgdepw

kubeflow 기능 살펴보기
- Notebook
    - working space => kubeflow는 pod 기반이고, pod가 stateless하기 때문에 저장하고 싶으면 따로 공간 지정 필요
- Tensorboards
    - 클라우드 등의 store에서 가져올 수 있음
- Volumes
    - Persistent volume claim (PVC)
- Models
    - skip
- Experiments (AutoML => katib tuning 용)
- Experiments (kubeflow pipeline, KFP => pipeline 결과 확인용)
- Pipelines
    - preprocessing => training 등의 pipeline 정의
    - compile한 yaml 파일을 업로드 하여 정의 가능
- Runs
    - pipeline 실행 시킬 수 있음 (create run) // pipelines 에서도 실행은 가능
- Recurring Runs
    - 어떤 주기 별로 pipeline을 실행시킬 것인지 recurring mode 결과
- Artifacts
    - 훈련된 모델 등 저장
- Manage contributors
    - user id를 추가하면 추가된 user는 자신과 같은 kubeflow 인터페이스에 접근 가능

KFP 실습 1
python3 -m pip install kfp --upgrade
# Running check => python code 내에서 import kfp 해서 쓰는 쪽으로 전환
# kubectl get nodes
# kubectl get pod -n kubeflow

Component: (대체로) 재사용 가능한 형태로 분리된 하나의 작업 단위 = Pod
Pipeline: 여러 Component들의 연관성, 순서에 따라 연결지은 그래프 (DAG) = Workflow

kfp sdk => pipeline 구현 => kfp dsl-compile or kfp.compiler.Compiler().compile() 로 k8s가 이해할 수 있는 형태의 yaml 파일 생성
Workflow: 여러 개의 container 들을 정해진 순서에 따라 실행시키고, input/output 을 전달하는 것을 정의한 DAG.
          k8s 기본 리소스는 아니지만 argoproj의 workflow-controller에 의해 관리되는 custom resource 임.

component들은 하나의 baseline image 위에서 독립적 (메모리, ...)으로 실행되며 일반적으로 input/output으로 communication.
(PVC로 공유할 수도 있긴 함)

kfp library를 활용하여 pipeline code를 만들고 compile => 이 때 코드에 한글 주석 등이 있으면 나중에 오류가 나니 제거
pandas와 같이 import 하여 쓰는 경우 component에 해당하는 함수 안에서 선언하고 사용해야하며, clean 하게 하기 위해선 base image 사용
(e.g., create_component_from_func(func=..., base_image='python:customized', ...)

오류 등의 발생으로 container 생성이 멈춰있다면 kubectl describe pods  사용 (해당 namespace로 가서 써야함)
=> 뭔가 not found가 생길 경우 namespace 내에 같이 있는지 확인.
(kubectl get secret <secret-name> --namespace=<source-namespace>  -o yaml \
  | sed 's/namespace: <from-namespace>/namespace: <to-namespace>/' \
  | kubectl create -f -)
(이번 경우는 mlpipeline-minio-artifact가 container creating하는 pod와 같은 namespace에 없었던 것이 문제였음)
(참고: https://stackoverflow.com/questions/55515594/is-there-a-way-to-share-a-configmap-in-kubernetes-between-namespaces/55516643)

